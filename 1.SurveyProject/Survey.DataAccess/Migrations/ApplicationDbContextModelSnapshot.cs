// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Survey.DataAccess;

namespace Survey.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Survey.Entities.Question.QuestionBank", b =>
                {
                    b.Property<int>("QuestionBankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("QuestionBankId");

                    b.ToTable("QuestionBank");
                });

            modelBuilder.Entity("Survey.Entities.Question.Response", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionBankId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ResponseId");

                    b.HasIndex("QuestionBankId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("Survey.Entities.Survey.Respondent", b =>
                {
                    b.Property<int>("RespondentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SubmitTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SurveyDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RespondentId");

                    b.HasIndex("SurveyDetailId");

                    b.HasIndex("UserAccountId", "SurveyDetailId")
                        .IsUnique();

                    b.ToTable("Respondents");
                });

            modelBuilder.Entity("Survey.Entities.Survey.RespondentAnswer", b =>
                {
                    b.Property<int>("RespondentAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionBankId")
                        .HasColumnType("int");

                    b.Property<int>("RespondentId")
                        .HasColumnType("int");

                    b.HasKey("RespondentAnswerId");

                    b.HasIndex("QuestionBankId");

                    b.HasIndex("RespondentId");

                    b.ToTable("RespondentAnswers");
                });

            modelBuilder.Entity("Survey.Entities.Survey.SurveyDetail", b =>
                {
                    b.Property<Guid>("SurveyDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SurveyDetailId");

                    b.ToTable("SurveyDetails");
                });

            modelBuilder.Entity("Survey.Entities.Survey.SurveyDetailQuestion", b =>
                {
                    b.Property<Guid>("SurveyDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuestionBankId")
                        .HasColumnType("int");

                    b.HasKey("SurveyDetailId", "QuestionBankId");

                    b.HasIndex("QuestionBankId");

                    b.ToTable("SurveyDetailQuestions");
                });

            modelBuilder.Entity("Survey.Entities.User.UserAccount", b =>
                {
                    b.Property<Guid>("UserAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("UserAccountId");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("Survey.Entities.Question.Response", b =>
                {
                    b.HasOne("Survey.Entities.Question.QuestionBank", null)
                        .WithMany("Responses")
                        .HasForeignKey("QuestionBankId");
                });

            modelBuilder.Entity("Survey.Entities.Survey.Respondent", b =>
                {
                    b.HasOne("Survey.Entities.Survey.SurveyDetail", "SurveyDetail")
                        .WithMany()
                        .HasForeignKey("SurveyDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey.Entities.User.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyDetail");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Survey.Entities.Survey.RespondentAnswer", b =>
                {
                    b.HasOne("Survey.Entities.Question.QuestionBank", "QuestionBank")
                        .WithMany()
                        .HasForeignKey("QuestionBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey.Entities.Survey.Respondent", "Respondent")
                        .WithMany()
                        .HasForeignKey("RespondentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionBank");

                    b.Navigation("Respondent");
                });

            modelBuilder.Entity("Survey.Entities.Survey.SurveyDetailQuestion", b =>
                {
                    b.HasOne("Survey.Entities.Question.QuestionBank", "QuestionBank")
                        .WithMany("SurveyDetailQuestions")
                        .HasForeignKey("QuestionBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey.Entities.Survey.SurveyDetail", "SurveyDetail")
                        .WithMany("SurveyDetailQuestions")
                        .HasForeignKey("SurveyDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionBank");

                    b.Navigation("SurveyDetail");
                });

            modelBuilder.Entity("Survey.Entities.Question.QuestionBank", b =>
                {
                    b.Navigation("Responses");

                    b.Navigation("SurveyDetailQuestions");
                });

            modelBuilder.Entity("Survey.Entities.Survey.SurveyDetail", b =>
                {
                    b.Navigation("SurveyDetailQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
